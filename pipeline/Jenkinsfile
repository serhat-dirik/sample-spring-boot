#!groovy
node('maven') {
   // define commands
   def mvnCmd = "mvn -s pipeline/configuration/maven-settings.xml"

   stage ('Build') {
     //Jenkins & gogs are in the same namespace
     git branch: 'master', url: 'https://github.com/serhat-dirik/sample-spring-boot'
     sh "${mvnCmd} clean install -Popenshift -DskipTests"
   }

   stage ('Unit Test & Static Analysis') {
          sh "${mvnCmd} test"
   }

   stage ('Deploy DEV') {
     def v = version()
    echo "Building image with the latest jar"
    sh "oc start-build sample-spring-boot-s2i --from-file=./target/sample-spring-boot.jar  --wait=true --follow -n sample-dev"
    echo "Verifying the build..."
    openshiftVerifyBuild(buildConfig: 'sample-spring-boot-s2i', namespace: 'sample-dev', waitTime: 900000)
    echo "Build is also triggered to deployment to DEV environment"
    openshiftVerifyDeployment(deploymentConfig: "sample-spring-boot", replicaCount: 1, verifyReplicaCount: true, namespace: 'sample-dev')
    echo "Verifying the deployment..."
   }
   def tag="blue"
   def altTag="green"

   stage ('Deploy Test') {
     def v = version()

     echo 'Promoting dev to test ...'
     //Find the active service
     sh "oc get route sample-spring-boot -n sample-test -o jsonpath='{ .spec.to.name }' > activeservice"
     activeService = readFile('activeservice').trim()
     echo "Active Service : ${activeService}"
     if (activeService == "sample-spring-boot-blue") {
         tag = "green"
         altTag = "blue"
     }
     echo "Deploying  sample-spring-boot-${tag}"

     openshiftTag(sourceStream: 'sample-spring-boot', sourceTag: 'latest', namespace: 'sample-dev', destinationStream: 'sample-spring-boot', destinationTag: "test-${tag}", destinationNamespace: 'sample-dev')
     openshiftTag(sourceStream: 'sample-spring-boot', sourceTag: 'latest', namespace: 'sample-dev', destinationStream: 'sample-spring-boot', destinationTag: "test-${v}", destinationNamespace: 'sample-dev')
     echo 'Deploying ...'
     sleep 22
     openshiftVerifyDeployment(deploymentConfig: "sample-spring-boot-${tag}", replicaCount: 1, verifyReplicaCount: true, namespace: 'sample-test')

   }

   stage ('Smoke Tests in Test Stage (Not Live)! This is your part to play!!'){

   }

   stage ('Approve to go Live (You have 30 minutes to complete this step) ??') {

     timeout(time:30, unit:'MINUTES') {
        input message:'Go Live in Test (switch to new version ${tag} )?' , ok: "Promote ${tag}"
     }

     sh "oc set route-backends sample-spring-boot sample-spring-boot-${tag}=100 sample-spring-boot-${altTag}=0 -n sample-test"
     sh "oc label svc sample-spring-boot-${altTag} state=idle --overwrite -n sample-test"
     sh "oc label svc sample-spring-boot-${tag} state=active --overwrite -n sample-test"
     echo "Now the test deployment switched to the ${tag} version"
   }


}

def version() {
  def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
